#!/bin/bash

# dhclient-script for Linux. Dan Halbert, March, 1997.
# Updated for Linux 2.[12] by Brian J. Murrell, January 1999.
# Modified for Debian.  Matt Zimmerman and Eloy Paris, December 2003
# Modified to remove useless tests for antiquated kernel versions that
# this doesn't even work with anyway, and introduces a dependency on /usr
# being mounted, which causes cosmetic errors on hosts that NFS mount /usr
# Andrew Pollock, February 2005
# Modified to work on point-to-point links. Andrew Pollock, June 2005
# Modified to support passing the parameters called with to the hooks. Andrew Pollock, November 2005

# modified make_resolv_conf () for Vyatta system below
make_resolv_conf() {
    local new_resolv_conf="/etc/resolv.conf.dhclient-new-$interface"
    local old_resolv_conf="/etc/resolv.conf.dhclient-old-$interface"
    mv -f $new_resolv_conf $old_resolv_conf
    if [ -n "$new_domain_name" -o -n "$new_domain_name_servers" ]; then
        if [ -n "$new_domain_name" ]; then
            echo search $new_domain_name >>$new_resolv_conf
        fi
        if [ -n "$new_domain_name_servers" ]; then
            for nameserver in $new_domain_name_servers; do
                echo nameserver $nameserver >>$new_resolv_conf
            done
        fi
    else
        echo " " > $new_resolv_conf
    fi

    /opt/vyatta/sbin/vyatta_update_resolv.pl --dhclient-script 1
    if ! diff -q $old_resolv_conf $new_resolv_conf >&/dev/null; then
       if [ -d /opt/vyatta/config/active/service/dns/forwarding ]; then
          /opt/vyatta/sbin/vyatta-dns-forwarding.pl --update-dnsforwarding --outside-cli >&/dev/null
       fi
    fi
    rm -f $old_resolv_conf
}

run_hook() {
    local script="$1"
    local exit_status
    shift	# discard the first argument, then the rest are the script's

    if [ -f $script ]; then
        . $script "$@"
    fi


    if [ -n "$exit_status" ] && [ "$exit_status" -ne 0 ]; then
        logger -p daemon.err "$script returned non-zero exit status $exit_status"
        save_exit_status=$exit_status
    fi

    return $exit_status
}

run_hookdir() {
    local dir="$1"
    local exit_status
    shift	# See run_hook

    if [ -d "$dir" ]; then
        for script in $(run-parts --list $dir); do
            run_hook $script "$@" || true
            exit_status=$?
        done
    fi

    return $exit_status
}

# Must be used on exit.   Invokes the local dhcp client exit hooks, if any.
exit_with_hooks() {
    exit_status=$1

    # Source the documented exit-hook script, if it exists
    if ! run_hook /etc/dhcp3/dhclient-exit-hooks "$@"; then
        exit_status=$?
    fi

    # Now run scripts in the Debian-specific directory.
    if ! run_hookdir /etc/dhcp3/dhclient-exit-hooks.d "$@"; then
        exit_status=$?
    fi

    exit $exit_status
}

set_hostname() {
    local current_hostname=$(hostname)
    if [ -z "$current_hostname" -o "$current_hostname" = "(none)" ]; then
        hostname "$new_host_name"
    fi
}

dhconfig() {
    if  [ ! "$old_routers" = "$new_routers" ] || 
	[ ! "$old_ip_address" = "$new_ip_address" ]; then
        # Flush old default route
	ip route flush dev $interface proto dhcp
    fi

    if [ -n "$old_ip_address" ] &&
       [ ! "$old_ip_address" = "$new_ip_address" ]; then
        # IP address changed.  Bringing down the interface will delete all
        # routes, and clear the ARP cache.
        ip -family inet addr flush dev $interface
        ip link set dev $interface down
    fi

    if [ "$reason" = "BOUND" ] || [ "$reason" = "REBOOT" ] ||
       [ ! "$old_ip_address" = "$new_ip_address" ] ||
       [ ! "$old_subnet_mask" = "$new_subnet_mask" ] ||
       [ ! "$old_network_number" = "$new_network_number" ] ||
       [ ! "$old_broadcast_address" = "$new_broadcast_address" ] ||
       [ ! "$old_routers" = "$new_routers" ] ||
       [ ! "$old_interface_mtu" = "$new_interface_mtu" ]; then
	ifconfig $interface inet $new_ip_address $new_subnet_arg \
                $new_broadcast_arg $mtu_arg

	# point to point
	if [ "$new_subnet_mask" == "255.255.255.255" ]; then
	    for router in $new_routers; do
		ip route add to $router dev $interface proto dhcp
	    done
	fi

        for router in $new_routers; do
	    ip route add to default via $router dev $interface \
		proto dhcp $metric_arg
        done
    fi

    make_resolv_conf
}

if [ -n "$new_broadcast_address" ]; then
    new_broadcast_arg="broadcast $new_broadcast_address"
fi
if [ -n "$old_broadcast_address" ]; then
    old_broadcast_arg="broadcast $old_broadcast_address"
fi
if [ -n "$new_subnet_mask" ]; then
    new_subnet_arg="netmask $new_subnet_mask"
fi
if [ -n "$old_subnet_mask" ]; then
    old_subnet_arg="netmask $old_subnet_mask"
fi
if [ -n "$new_interface_mtu" ]; then
    # Vyatta configuration overrides response from server to allow user
    # to work around broken ISP's
    mtu_path=$(/opt/vyatta/sbin/vyatta-interfaces.pl --dev=$interface --path)
    if [ -r $mtu_path ]; then
	read new_interface_mtu < $mtu_path
    fi

    # The 576 MTU is only used for X.25 and dialup connections
    # where the admin wants low latency.  Such a low MTU can cause
    # problems with UDP traffic, among other things.  As such,
    # disallow MTUs from 576 and below by default, so that broken
    # MTUs are ignored, but higher stuff is allowed (1492, 1500, etc).
    if [ $new_interface_mtu -gt 576 ]; then
	mtu_arg="mtu $new_interface_mtu"
    fi
fi
if [ -n "$IF_METRIC" ]; then
    metric_arg="metric $IF_METRIC"	# interfaces(5), "metric" option
else
    metric_arg="metric 2"		# default to lower priority than
    					# static routes
fi


# The action starts here

# Invoke the local dhcp client enter hooks, if they exist.
run_hook /etc/dhcp3/dhclient-enter-hooks
run_hookdir /etc/dhcp3/dhclient-enter-hooks.d

# Execute the operation
case "$reason" in
    MEDIUM)
        # Do nothing
        ;;

    PREINIT)
        if [ "${keep_old_ip}" = "yes" ]; then
            ip link set $interface up
        else
            ip -family inet addr flush dev $interface
            ip link set $interface up
        fi

        if [ -n "$DHCLIENT_DELAY" ] && [ $DHCLIENT_DELAY -gt 0 ]; then
            sleep $DHCLIENT_DELAY
        fi
        ;;

    ARPCHECK|ARPSEND)
        if [ -z "$new_ip_address" ] || [ -z "$interface" ] ||
           arping -q -f -c 2 -w 3 -D -I $interface $new_ip_address; then
            exit_with_hooks 0
        else
            exit_with_hooks 1
        fi
        ;;

    BOUND|RENEW|REBIND|REBOOT)
        set_hostname
        dhconfig
        exit_with_hooks 0
        ;;

    EXPIRE|FAIL|RELEASE|STOP)
	if  [ -n "$old_routers" ]; then
	    ip route flush dev $interface proto dhcp
	fi
        if [ -n "$old_ip_address" ]; then
            ip -family inet addr flush dev $interface
	    ip link set dev $interface down
        fi
	make_resolv_conf
        ;;

    TIMEOUT)
        if [ -n "$new_routers" ]; then
	    ifconfig $interface inet $new_ip_address $new_subnet_arg \
                $new_broadcast_arg $mtu_arg

            set -- $new_routers
            first_router="$1"

            if ping -q -c 1 -I $interface $first_router ; then
		dhconfig
		exit_with_hooks 0
	    fi
            ip -family inet addr flush dev $interface
	    # Note: this exits with interface still up
	    # see Debian bug #144666
        fi
        exit_with_hooks 2 "$@"
        ;;
esac

exit_with_hooks 0
